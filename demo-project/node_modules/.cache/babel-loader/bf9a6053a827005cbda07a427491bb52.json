{"ast":null,"code":"var _jsxFileName = \"U:\\\\Proyecto_Demo\\\\React JS project\\\\demo-project\\\\src\\\\contexts\\\\EmpleadoContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { PersonaService } from '../service/PersonaService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EmpleadoContext = /*#__PURE__*/createContext();\n\nconst EmpleadoContextProvider = props => {\n  _s();\n\n  const empleadoService = new PersonaService();\n  const [empleados, setEmpleados] = useState([]);\n  const [editEmpleado, setEditEmpleado] = useState(null);\n  useEffect(() => {\n    empleadoService.getAll().then(data => setEmpleados(data));\n  }, []);\n\n  const createEmpleado = empleado => {\n    empleadoService.create(empleado).then(data => setEmpleados([...empleados, data]));\n  };\n\n  const deleteEmpleado = idTCalificaciones => {\n    empleadoService.delete(idTCalificaciones).then(() => setEmpleados(empleados.filter(p => p.idTCalificaciones !== idTCalificaciones)));\n  };\n\n  const findEmpleado = idTCalificaciones => {\n    const empleado = empleados.find(p => p.idTCalificaciones === idTCalificaciones);\n    setEditEmpleado(empleado);\n  };\n\n  const updateEmpleado = empleado => {\n    empleadoService.update(empleado).then(data => setEmpleados(empleados.map(p => p.idTCalificaciones === empleado.idTCalificaciones ? empleado : p)));\n    setEditEmpleado(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(EmpleadoContext.Provider, {\n    value: {\n      createEmpleado,\n      deleteEmpleado,\n      findEmpleado,\n      updateEmpleado,\n      editEmpleado,\n      empleados\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EmpleadoContextProvider, \"UNRxUTHfwslJD9qkzUWdsZn4MUs=\");\n\n_c = EmpleadoContextProvider;\nexport default EmpleadoContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmpleadoContextProvider\");","map":{"version":3,"sources":["U:/Proyecto_Demo/React JS project/demo-project/src/contexts/EmpleadoContext.jsx"],"names":["React","createContext","useState","useEffect","PersonaService","EmpleadoContext","EmpleadoContextProvider","props","empleadoService","empleados","setEmpleados","editEmpleado","setEditEmpleado","getAll","then","data","createEmpleado","empleado","create","deleteEmpleado","idTCalificaciones","delete","filter","p","findEmpleado","find","updateEmpleado","update","map","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,QAA9B,EAAwCC,SAAxC,QAAwD,OAAxD;AACA,SAASC,cAAT,QAA+B,2BAA/B;;AAEA,OAAO,MAAMC,eAAe,gBAAGJ,aAAa,EAArC;;AAEP,MAAMK,uBAAuB,GAAIC,KAAD,IAAW;AAAA;;AACvC,QAAMC,eAAe,GAAG,IAAIJ,cAAJ,EAAxB;AAEJ,QAAM,CAACK,SAAD,EAAWC,YAAX,IAA2BR,QAAQ,CAAC,EAAD,CAAzC;AAEA,QAAM,CAACS,YAAD,EAAcC,eAAd,IAAiCV,QAAQ,CAAC,IAAD,CAA/C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,eAAe,CAACK,MAAhB,GAAyBC,IAAzB,CAA8BC,IAAI,IAAIL,YAAY,CAACK,IAAD,CAAlD;AACH,GAFQ,EAEP,EAFO,CAAT;;AAIA,QAAMC,cAAc,GAAIC,QAAD,IAAa;AAChCT,IAAAA,eAAe,CACdU,MADD,CACQD,QADR,EAECH,IAFD,CAEOC,IAAD,IAAUL,YAAY,CAAC,CAAC,GAAGD,SAAJ,EAAeM,IAAf,CAAD,CAF5B;AAGH,GAJD;;AAMA,QAAMI,cAAc,GAAIC,iBAAD,IAAsB;AACzCZ,IAAAA,eAAe,CACda,MADD,CACQD,iBADR,EAECN,IAFD,CAEM,MAAMJ,YAAY,CAACD,SAAS,CAACa,MAAV,CAAkBC,CAAD,IAAOA,CAAC,CAACH,iBAAF,KAAwBA,iBAAhD,CAAD,CAFxB;AAGH,GAJD;;AAMA,QAAMI,YAAY,GAAIJ,iBAAD,IAAsB;AACvC,UAAMH,QAAQ,GAAGR,SAAS,CAACgB,IAAV,CAAeF,CAAC,IAAIA,CAAC,CAACH,iBAAF,KAAwBA,iBAA5C,CAAjB;AACAR,IAAAA,eAAe,CAACK,QAAD,CAAf;AACH,GAHD;;AAKA,QAAMS,cAAc,GAAIT,QAAD,IAAa;AAChCT,IAAAA,eAAe,CACdmB,MADD,CACQV,QADR,EAECH,IAFD,CAEOC,IAAD,IACNL,YAAY,CACRD,SAAS,CAACmB,GAAV,CAAcL,CAAC,IAAIA,CAAC,CAACH,iBAAF,KAAwBH,QAAQ,CAACG,iBAAjC,GAAqDH,QAArD,GAAgEM,CAAnF,CADQ,CAHZ;AAOAX,IAAAA,eAAe,CAAC,IAAD,CAAf;AACH,GATD;;AAWI,sBACI,QAAC,eAAD,CAAiB,QAAjB;AACA,IAAA,KAAK,EAAE;AACHI,MAAAA,cADG;AAEHG,MAAAA,cAFG;AAGHK,MAAAA,YAHG;AAIHE,MAAAA,cAJG;AAKHf,MAAAA,YALG;AAMHF,MAAAA;AANG,KADP;AAAA,cAUKF,KAAK,CAACsB;AAVX;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CAtDD;;GAAMvB,uB;;KAAAA,uB;AAwDN,eAAeA,uBAAf","sourcesContent":["import React, {createContext, useState, useEffect} from 'react';\r\nimport { PersonaService } from '../service/PersonaService';\r\n\r\nexport const EmpleadoContext = createContext();\r\n\r\nconst EmpleadoContextProvider = (props) => {\r\n    const empleadoService = new PersonaService();\r\n\r\nconst [empleados,setEmpleados] = useState([]);\r\n\r\nconst [editEmpleado,setEditEmpleado] = useState(null);\r\n\r\nuseEffect(() => {\r\n    empleadoService.getAll().then(data => setEmpleados(data))\r\n},[]);\r\n\r\nconst createEmpleado = (empleado) =>{\r\n    empleadoService\r\n    .create(empleado)\r\n    .then((data) => setEmpleados([...empleados, data]))\r\n}\r\n\r\nconst deleteEmpleado = (idTCalificaciones) =>{\r\n    empleadoService\r\n    .delete(idTCalificaciones)\r\n    .then(() => setEmpleados(empleados.filter((p) => p.idTCalificaciones !== idTCalificaciones )))\r\n}\r\n\r\nconst findEmpleado = (idTCalificaciones) =>{\r\n    const empleado = empleados.find(p => p.idTCalificaciones === idTCalificaciones);\r\n    setEditEmpleado(empleado);\r\n}\r\n\r\nconst updateEmpleado = (empleado) =>{\r\n    empleadoService\r\n    .update(empleado)\r\n    .then((data) => \r\n    setEmpleados(\r\n        empleados.map(p => p.idTCalificaciones === empleado.idTCalificaciones ? empleado : p)\r\n        ));\r\n\r\n    setEditEmpleado(null);\r\n}\r\n\r\n    return (\r\n        <EmpleadoContext.Provider\r\n        value={{\r\n            createEmpleado,\r\n            deleteEmpleado,\r\n            findEmpleado,\r\n            updateEmpleado,\r\n            editEmpleado,\r\n            empleados\r\n        }}\r\n        >\r\n            {props.children}\r\n        \r\n        </EmpleadoContext.Provider>\r\n    );\r\n};\r\n\r\nexport default EmpleadoContextProvider;"]},"metadata":{},"sourceType":"module"}