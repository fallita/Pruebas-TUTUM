{"ast":null,"code":"var _jsxFileName = \"U:\\\\Proyecto_Demo\\\\React JS project\\\\demo-project\\\\src\\\\contexts\\\\EmpleadoContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { PersonaService } from '../service/PersonaService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EmpleadoContext = /*#__PURE__*/createContext();\n\nconst EmpleadoContextProvider = props => {\n  _s();\n\n  const empleadoService = new PersonaService();\n  const [empleados, setEmpleados] = useState([]);\n  const [editEmpleados, setEditEmpleados] = useState(null);\n  useEffect(() => {\n    empleadoService.getAll().then(data => setEmpleados(data));\n  }, [empleadoService, empleados]);\n\n  const createEmpleado = empleado => {\n    empleadoService.create(empleado).then(data => setEmpleados([...empleados, data]));\n  };\n\n  const deleteEmpleado = id => {\n    empleadoService.delete(id).then(data => setEmpleados(empleados.filter(p => p.id !== id)));\n  };\n\n  const findEmpleado = id => {\n    const empleado = empleados.find(p => p.id === id);\n    setEditEmpleados(empleado);\n  };\n\n  const updateEmpleado = empleado => {\n    empleadoService.update(empleado).then(data => setEmpleados(empleados.map(p => p.id === empleado.id ? data : empleado)));\n    setEditEmpleados(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(EmpleadoContext.Provider, {\n    value: {\n      createEmpleado,\n      deleteEmpleado,\n      findEmpleado,\n      updateEmpleado,\n      empleados\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EmpleadoContextProvider, \"cegUpp+fh9BQMKGrFzHphBLrSZY=\");\n\n_c = EmpleadoContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmpleadoContextProvider\");","map":{"version":3,"sources":["U:/Proyecto_Demo/React JS project/demo-project/src/contexts/EmpleadoContext.jsx"],"names":["React","createContext","useState","useEffect","PersonaService","EmpleadoContext","EmpleadoContextProvider","props","empleadoService","empleados","setEmpleados","editEmpleados","setEditEmpleados","getAll","then","data","createEmpleado","empleado","create","deleteEmpleado","id","delete","filter","p","findEmpleado","find","updateEmpleado","update","map","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,QAA9B,EAAwCC,SAAxC,QAAwD,OAAxD;AACA,SAASC,cAAT,QAA+B,2BAA/B;;AAEA,OAAO,MAAMC,eAAe,gBAAGJ,aAAa,EAArC;;AAEP,MAAMK,uBAAuB,GAAIC,KAAD,IAAW;AAAA;;AACvC,QAAMC,eAAe,GAAG,IAAIJ,cAAJ,EAAxB;AAEJ,QAAM,CAACK,SAAD,EAAWC,YAAX,IAA2BR,QAAQ,CAAC,EAAD,CAAzC;AAEA,QAAM,CAACS,aAAD,EAAeC,gBAAf,IAAmCV,QAAQ,CAAC,IAAD,CAAjD;AAGAC,EAAAA,SAAS,CAAC,MAAI;AACVK,IAAAA,eAAe,CAACK,MAAhB,GAAyBC,IAAzB,CAA8BC,IAAI,IAAIL,YAAY,CAACK,IAAD,CAAlD;AACH,GAFQ,EAEN,CAACP,eAAD,EAAkBC,SAAlB,CAFM,CAAT;;AAIA,QAAMO,cAAc,GAAIC,QAAD,IAAa;AAChCT,IAAAA,eAAe,CACdU,MADD,CACQD,QADR,EAECH,IAFD,CAEOC,IAAD,IAAUL,YAAY,CAAC,CAAC,GAAGD,SAAJ,EAAeM,IAAf,CAAD,CAF5B;AAGH,GAJD;;AAMA,QAAMI,cAAc,GAAIC,EAAD,IAAO;AAC1BZ,IAAAA,eAAe,CACda,MADD,CACQD,EADR,EAECN,IAFD,CAEOC,IAAD,IAAUL,YAAY,CAACD,SAAS,CAACa,MAAV,CAAkBC,CAAD,IAAOA,CAAC,CAACH,EAAF,KAASA,EAAjC,CAAD,CAF5B;AAGH,GAJD;;AAMA,QAAMI,YAAY,GAAIJ,EAAD,IAAO;AACxB,UAAMH,QAAQ,GAAGR,SAAS,CAACgB,IAAV,CAAeF,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASA,EAA7B,CAAjB;AACAR,IAAAA,gBAAgB,CAACK,QAAD,CAAhB;AACH,GAHD;;AAKA,QAAMS,cAAc,GAAIT,QAAD,IAAa;AAChCT,IAAAA,eAAe,CACdmB,MADD,CACQV,QADR,EAECH,IAFD,CAEOC,IAAD,IAAUL,YAAY,CAACD,SAAS,CAACmB,GAAV,CAAcL,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASH,QAAQ,CAACG,EAAlB,GAAuBL,IAAvB,GAA8BE,QAAjD,CAAD,CAF5B;AAIAL,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,GAND;;AAQI,sBACI,QAAC,eAAD,CAAiB,QAAjB;AACA,IAAA,KAAK,EAAE;AACHI,MAAAA,cADG;AAEHG,MAAAA,cAFG;AAGHK,MAAAA,YAHG;AAIHE,MAAAA,cAJG;AAKHjB,MAAAA;AALG,KADP;AAAA,cASKF,KAAK,CAACsB;AATX;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAnDD;;GAAMvB,uB;;KAAAA,uB","sourcesContent":["import React, {createContext, useState, useEffect} from 'react';\r\nimport { PersonaService } from '../service/PersonaService';\r\n\r\nexport const EmpleadoContext = createContext();\r\n\r\nconst EmpleadoContextProvider = (props) => {\r\n    const empleadoService = new PersonaService();\r\n\r\nconst [empleados,setEmpleados] = useState([]);\r\n\r\nconst [editEmpleados,setEditEmpleados] = useState(null);\r\n\r\n\r\nuseEffect(()=>{\r\n    empleadoService.getAll().then(data => setEmpleados(data));\r\n}, [empleadoService, empleados]);\r\n\r\nconst createEmpleado = (empleado) =>{\r\n    empleadoService\r\n    .create(empleado)\r\n    .then((data) => setEmpleados([...empleados, data]))\r\n}\r\n\r\nconst deleteEmpleado = (id) =>{\r\n    empleadoService\r\n    .delete(id)\r\n    .then((data) => setEmpleados(empleados.filter((p) => p.id !== id )))\r\n}\r\n\r\nconst findEmpleado = (id) =>{\r\n    const empleado = empleados.find(p => p.id === id);\r\n    setEditEmpleados(empleado);\r\n}\r\n\r\nconst updateEmpleado = (empleado) =>{\r\n    empleadoService\r\n    .update(empleado)\r\n    .then((data) => setEmpleados(empleados.map(p => p.id === empleado.id ? data : empleado)))\r\n\r\n    setEditEmpleados(null);\r\n}\r\n\r\n    return (\r\n        <EmpleadoContext.Provider\r\n        value={{\r\n            createEmpleado,\r\n            deleteEmpleado,\r\n            findEmpleado,\r\n            updateEmpleado,\r\n            empleados\r\n        }}\r\n        >\r\n            {props.children}\r\n        \r\n        </EmpleadoContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}